.seeds-grid {
  --grid-gap-sm: var(--seeds-s4);
  --grid-gap-md: var(--seeds-s6);
  --grid-gap-lg: var(--seeds-s8);
  --grid-gap-xl: var(--seeds-s12);

  --grid-gap-mobile: var(--grid-gap-sm);

  --grid-gap: var(--grid-gap-md);

  @media (--sm-only) {
    --grid-gap: var(--grid-gap-mobile);
  }

  display: grid;
  gap: var(--grid-gap);

  &[data-spacing="sm"] {
    --grid-gap: var(--grid-gap-sm);
  }

  @media (--lg-and-up) {
    &[data-spacing="md"] {
      --grid-gap: var(--grid-gap-md);
    }

    &[data-spacing="lg"] {
      --grid-gap: var(--grid-gap-lg);
    }

    &[data-spacing="xl"] {
      --grid-gap: var(--grid-gap-xl);
    }
  }
}

.seeds-grid-row {
  --grid-columns: auto-fit;
  --grid-minimum-column-size: 0;

  @media (--sm-only) {
    --grid-columns: 1;
  }

  @media (--sm-and-up) and (--lg-down) {
    /* This ensures a wide enough min column size at "tablet" breakpoint so that
     * no more than 2 columns show:
     */
    &:not([data-columns="1"]) {
      --grid-minimum-column-size: 40%; /* a reasonable value below 50% */
    }
  }

  display: grid;
  gap: inherit;
  grid-template-columns: repeat(var(--grid-columns), minmax(var(--grid-minimum-column-size), 1fr));
}

.seeds-grid-row > * {
  overflow-wrap: break-word;
}

@media (--lg-and-up) {
  /* Convenience utility classes for use by grid cells */
  .seeds-grid-span-2 {
    grid-column: span 2;
  }

  .seeds-grid-span-3 {
    grid-column: span 3;
  }

  /* Only large screens can force more than two columns */
  .seeds-grid-row[data-columns="4"] {
    --grid-columns: 4;
  }

  .seeds-grid-row[data-columns="3"] {
    --grid-columns: 3;
  }
}

@media (--sm-and-up) {
  .seeds-grid-row[data-columns="2"] {
    --grid-columns: 2;
  }
}

.seeds-grid-row[data-columns="1"] {
  --grid-columns: 1;
}
